################################
WebRTC RTP Congestion Control
################################


.. include:: ../links.ref
.. include:: ../tags.ref
.. include:: ../abbrs.ref

============ ==========================
**Abstract** WebRTC RTP 拥塞控制
**Authors**  Walter Fan
**Status**   WIP
**Updated**  |date|
============ ==========================

.. |date| date::

.. contents::
   :local:


简介
=========================
视频会议需要低延迟和高带宽

* 基于延迟的控制器 delay-based controller
* 基于丢包的控制器 loss-based controller


基本架构
=========================

在发送方，根据 RTCP Receiver Report 中的 faction lost 得知丢包率，可以调整发送的码率


在接收方，根据 RTP 包到达的时间延迟，通过 arrival time filter, 估算出网络延迟 m(ti), 经过 over-user detector 来判断当前网络的拥塞情况， 再由 Remote rate controller 根据规则计算出最大码率 Ar, 通过 RTCP REMB 消息将 Ar 发回给发送方。 发送方再由 A_s, A_r 和配置，计算出目标的码率 A, 应用到 Encoder 和 Packed Sender 来控制发送方的码率。


.. image:: ../_static/gcc-architecture.png
   :alt: gcc-architecture

术语
=========================
* RMCAT: RTP Media Congestion Avoidance Techniques 即 RTP 媒体拥塞避免技术
  
* 排队延迟

* 延迟梯度

* 卡尔曼滤波

* inter-depature delta time

* inter-arrival delta time

* inter-group delay variation

* BBR

* PCC


交互式实时媒体的拥塞控制的需求
============================================

基本要求：在最多几百毫秒之内，接收方能够连贯流畅地听到或看到发送方的声音，图像或视频。

具体要求, 参见 `RFC8836`

1.   The congestion control algorithm MUST attempt to provide as-low-
      as-possible-delay transit for interactive real-time traffic
        while still providing a useful amount of bandwidth.

2.   The algorithm MUST be fair to other flows, both real-time flows
   (such as other instances of itself) and TCP flows, both long-
   lived flows and bursts such as the traffic generated by a
   typical web-browsing session. 

3.   The algorithm SHOULD NOT starve competing TCP flows and SHOULD,
   as best as possible, avoid starvation by TCP flows

4.   The algorithm SHOULD adapt as quickly as possible to initial
   network conditions at the start of a flow. 


5.   The algorithm SHOULD be stable if the RTP streams are halted or
        discontinuous (for example, when using Voice Activity
        Detection).

6.   Where possible, the algorithm SHOULD merge information across
        multiple RTP streams sent between two endpoints when those RTP
        streams share a common bottleneck, whether or not those streams
        are multiplexed onto the same ports.

7.   The algorithm SHOULD NOT require any special support from
        network elements to be able to convey congestion-related
        information. 

8.   Since the assumption here is a set of RTP streams, the
        backchannel typically SHOULD be done via the RTP Control
        Protocol (RTCP)

9.   Flows managed by this algorithm and flows competing against each
   other at a bottleneck may have different Differentiated Services
   Code Point (DSCP) [RFC5865] markings depending on the type of
   traffic or may be subject to flow-based QoS.

10.  The algorithm SHOULD sense the unexpected lack of backchannel
   information as a possible indication of a channel-overuse
   problem and react accordingly to avoid burst events causing a
   congestion collapse.

11.  The algorithm SHOULD be stable and maintain low delay when faced
   with Active Queue Management (AQM) algorithms.  Also note that
   these algorithms may apply across multiple queues in the
   bottleneck or to a single queue.

平滑发送 Smooth/Paced Sender
============================================
* send rate
* ack rate
  
Google Congestion Control
============================================
1. 到达时间滤波器 arrival time filter

.. code-block::

   d(i) = t(i) – t(i-1) – (T(i) – T(i-1))


   d(i) = dL(i)/C(i) + w(i)  

   d(i) = dL(i)/C(i) + m(i) + v(i)   

   其中dL(i)表示相邻两帧的长度差，
   C(i)表示网络信道容量，
   m(i)表示网络排队延迟，
   v(i)表示零均值噪声。
   m(i)即是我们要求得的网络排队延迟, 可由 Kalman Filter 求得

T(i)是第i个数据包组中第一个数据包的发送时间，t(i)是第i个数据包组中最后一个数据包的到达时间


2. 过载检查器 over-use detector

3. 速率控制器 rate controller

参考资料
=========================
* `REMB`_ : RTCP message for Receiver Estimated Maximum Bitrate

* `A Google Congestion Control Algorithm for Real-Time Communication`_

* `Analysis and Design of the Google Congestion Control for WebRTC <https://c3lab.poliba.it/images/6/65/Gcc-analysis.pdf>`_

* `GCC Introduction`_

* `RFC8825`_: Overview: Real-Time Protocols for Browser-Based Applications
* `RFC8836`_:  Congestion Control Requirements for Interactive Real-Time Media
 
* `RMCAT documents`_: RTP Media Congestion Avoidance Techniques documents

.. _RMCAT documents: https://datatracker.ietf.org/wg/rmcat/documents/
.. _GCC: https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02
.. _A Google Congestion Control Algorithm for Real-Time Communication: https://datatracker.ietf.org/doc/html/draft-alvestrand-rmcat-congestion-03
.. _GCC Introduction: https://www.cnblogs.com/wangyiyunxin/p/11122003.html